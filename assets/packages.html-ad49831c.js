import{_ as e,o as i,c as a,e as l}from"./app-2c680f2e.js";const r={},n=l('<h1 id="packages" tabindex="-1"><a class="header-anchor" href="#packages" aria-hidden="true">#</a> packages</h1><h2 id="interface-enhancement" tabindex="-1"><a class="header-anchor" href="#interface-enhancement" aria-hidden="true">#</a> Interface Enhancement</h2><ul><li>Dashboard - A startup dashboard which provides certain information about your recent Emacs activities.</li><li>Helpful - An enchancement of the Emacs built-in help system.</li><li>beacon - Never lose your cursor again.</li><li>pulsar - Highlights current line, an minimal alternative to beacon.</li></ul><h3 id="window-frame-management" tabindex="-1"><a class="header-anchor" href="#window-frame-management" aria-hidden="true">#</a> Window &amp; Frame Management</h3><h4 id="switching" tabindex="-1"><a class="header-anchor" href="#switching" aria-hidden="true">#</a> Switching</h4><ul><li>windmove - [built-in] Tired with C-x o? Now you can use shift+arrows to jump between windows.</li><li>emacs-winum - Window numbers for Emacs - Navigate windows and frames using numbers.</li><li>switch-window - A visual replacement for C-x o.</li><li>ace-window - Quickly switch windows.</li><li>buffer-move - Move or swap buffer to other window.</li></ul><h3 id="key-bindings" tabindex="-1"><a class="header-anchor" href="#key-bindings" aria-hidden="true">#</a> Key-bindings</h3><ul><li>Evil - An e xtensible vi l ayer: manipulate Emacs with Vi key binding. <ul><li>Evil Collection - A collection of Evil bindings.</li><li>Evil Magit - Evil bindings for Magit.</li></ul></li><li>general - A convenient, unified interface for key definitions - like use-package but for key-bindings.</li></ul><h3 id="minibuffer" tabindex="-1"><a class="header-anchor" href="#minibuffer" aria-hidden="true">#</a> Minibuffer</h3><ul><li>Ivy - flexible, simple tools for minibuffer completion in Emacs. <ul><li>Ivy, a generic completion mechanism for Emacs.</li><li>Counsel, a collection of Ivy-enhanced versions of common Emacs commands.</li><li>Swiper, an Ivy-enhanced alternative to isearch.</li></ul></li><li>Icicles - An Emacs library that enhances minibuffer completion.</li><li>smex - A smart M-x enhancement for Emacs.</li><li>amx - An alternative M-x interface for Emacs.</li><li>vertico - Vertico provides a minimalistic vertical completion UI, which is based on the default completion system.</li><li>marginalia - Show document of function in ==M-x=, or file attributes in C-x C-f.</li><li>consult - Consult provides various practical commands based on the Emacs completion function completing-read.</li><li>prescient.el - Fast and intuitive frequency-and-recency-based sorting and filtering for Emacs.</li><li>Orderless - Use space-separated search terms in any order when completing with Icomplete or the default interface.</li><li>Snails - A modern, easy-to-expand fuzzy search framework.</li></ul><h3 id="modeline" tabindex="-1"><a class="header-anchor" href="#modeline" aria-hidden="true">#</a> Modeline</h3><ul><li>powerline - Emacs version of the Vim powerline. <ul><li>powerline-evil - Utilities for better Evil support for Powerline.</li></ul></li><li>smart-mode-line - A sexy mode-line for Emacs.</li><li>spaceline - Powerline theme from Spacemacs.</li><li>telephone-line - A new implementation of Powerline for Emacs.</li><li>diminish - Diminished modes are minor modes with no modeline display.</li><li>doom-modeline - A mode-line package included in Doom and Centaur emacs.</li><li>blackout - Customize or hide the display of major and minor modes in the mode-line.</li></ul><h3 id="dim-distracting" tabindex="-1"><a class="header-anchor" href="#dim-distracting" aria-hidden="true">#</a> Dim Distracting</h3><ul><li>dimmer.el - Interactively highlight which buffer is active by dimming the others.</li><li>Solaire mode - Visually distinguish file-visiting windows from other types of windows (like popups or sidebars) by giving them a slightly different background.</li><li>focus - Dim the font color of text in surrounding paragraphs.</li></ul><h2 id="editing-enhancement" tabindex="-1"><a class="header-anchor" href="#editing-enhancement" aria-hidden="true">#</a> Editing Enhancement</h2><ul><li>multifiles.el - View and edit parts of multiple files in one buffer.</li><li>lentic - Create views of the same content in two Emacs buffers.</li><li>artist-mode - [built-in] Draw ASCII lines, squares, rectangles and poly-lines, ellipses, and circles with your mouse and/or keyboard.</li><li>crux - A Collection of Ridiculously Useful eXtensions for Emacs.</li><li>typo.el - Emacs extension for typographical editing.</li></ul><h3 id="indentation-enhancement" tabindex="-1"><a class="header-anchor" href="#indentation-enhancement" aria-hidden="true">#</a> Indentation Enhancement</h3><ul><li>highlight-Indentation-mode - Highlight indentation.</li><li>indent-guide - Show vertical lines to guide indentation.</li><li>Aggressive-indent - Keeps your code always indented automatically.</li><li>electric-indent-mode - [built-in] (enabled by default) Auto-indent current and new lines (Emacs Wiki)</li><li>highlight-indent-guides - Highlight indentation.</li><li>hl-indent-scope - Highlight indentation using source-code scope (typically defined by brackets).</li></ul><h3 id="symbols-tokens" tabindex="-1"><a class="header-anchor" href="#symbols-tokens" aria-hidden="true">#</a> Symbols / Tokens</h3><ul><li>rainbow-mode - Colorize color names / color hex code in buffers.</li><li>symbol-overlay - Highlight symbols with keymap-enabled overlays (inspired by highlight-symbol).</li><li>highlight-symbol - Auto/manually highlight the same symbols in code, navigate in them, or replace string.</li><li>highlight-thing - Light-weight minor mode to highlight thing under point using built-ins.</li><li>color-identifiers-mode - Color Identifiers is a minor mode for Emacs that highlights each source code identifier uniquely based on its name.</li><li>idle-highlight-mode - Light-weight minor mode to automatically highlight the thing at point when idle, with configurable exceptions &amp; behavior.</li></ul><h3 id="whitespaces-enhancement" tabindex="-1"><a class="header-anchor" href="#whitespaces-enhancement" aria-hidden="true">#</a> Whitespaces Enhancement</h3><ul><li>whitespace - [built-in] Visualize blanks (tab/space/newline).</li><li>whitespace-cleanup-mode - Intelligently call whitespace-cleanup on save.</li></ul><h3 id="delete-enhancement" tabindex="-1"><a class="header-anchor" href="#delete-enhancement" aria-hidden="true">#</a> Delete Enhancement</h3><ul><li>delete-selection-mode - [built-in] Auto delete selected region when typing, just like most of other modern text editors.</li><li>hungry-delete - Delete an entire block of whitespace at point.</li></ul><h3 id="fancy-icons" tabindex="-1"><a class="header-anchor" href="#fancy-icons" aria-hidden="true">#</a> Fancy Icons</h3><ul><li>all-the-icons - A package used to include fancy icons within emacs.</li><li>emojify - Display emojis in Emacs.</li><li>mode-icons - Show icons instead of mode names.</li><li>prettify-symbol-mode - [built-in] displaying characters as fancy symbols (e.g. lambda -&gt; Î»).</li></ul><h3 id="massive-edit" tabindex="-1"><a class="header-anchor" href="#massive-edit" aria-hidden="true">#</a> Massive Edit</h3><ul><li>Multiple cursors - Mark, edit multiple lines at once.</li><li>visual-regexp - Replace via RegExp, with real-time visual feedback directly in the buffer.</li><li>visual-regexp-steroids - The same as visual-regexp, but use modern regular expressions instead of Emacs-style.</li></ul><h3 id="quotes-parenthesis-delimiters-handling" tabindex="-1"><a class="header-anchor" href="#quotes-parenthesis-delimiters-handling" aria-hidden="true">#</a> Quotes &amp; Parenthesis &amp; Delimiters Handling</h3><h4 id="insert-edit" tabindex="-1"><a class="header-anchor" href="#insert-edit" aria-hidden="true">#</a> Insert &amp; Edit</h4><ul><li>electric-pair-mode - [built-in] Auto close, or insert matching delimiters: parentheses, braces, brackets, etc. (GNU Manual)</li><li>SmartParens - Deals with parens pairs and tries to be smart about it.</li><li>siege-mode - An emacs minor mode to surround the region with smart delimiters interactively.</li><li>emacs-surround - Emacs version of vim.surround</li></ul><h4 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> Select</h4><ul><li>expand-region.el - Increase selected region by semantic units.</li></ul><h4 id="highlight" tabindex="-1"><a class="header-anchor" href="#highlight" aria-hidden="true">#</a> Highlight</h4><ul><li>show-paren-mode - [built-in] a minor mode to visualize parenthesis matching.</li><li>rainbow-delimiters - Highlights parentheses, brackets, and braces according to their depth.</li><li>highlight-parentheses.el - highlight surrounding parentheses.</li></ul><h3 id="kill-ring-clipboard" tabindex="-1"><a class="header-anchor" href="#kill-ring-clipboard" aria-hidden="true">#</a> Kill-ring / Clipboard</h3><ul><li>Popup-killring - Browse kill-ring with popup menu.</li><li>Browse-kill-ring - Visually navigate kill-ring.</li><li>easy-kill - Kill &amp; Mark Things Easily in Emacs.</li><li>clipmon - Clipboard monitor for Emacs. Monitors clipboard and pastes contents on change.</li><li>simpleclip - Simplified access to the system clipboard.</li></ul><h3 id="drag-lines" tabindex="-1"><a class="header-anchor" href="#drag-lines" aria-hidden="true">#</a> Drag Lines</h3><ul><li>move-text - move current line or region up or down.</li><li>move-dup - Minor mode for Eclipse-like moving and duplicating lines or rectangles.</li><li>Drag Stuff - Drag Stuff is a minor mode for Emacs that makes it possible to drag stuff (words, region, lines) around in Emacs.</li></ul><h3 id="undo-redo" tabindex="-1"><a class="header-anchor" href="#undo-redo" aria-hidden="true">#</a> Undo &amp; Redo</h3><ul><li>undo-tree - Visualize the whole undo history in buffer as a tree, and you can access anywhere in it.</li><li>undo-fu - An undo/redo system that advertises itself as being simpler than Undo Tree.</li><li>undo-fu-session - Save undo history across sessions. Intended to work with, but not dependent on undo-fu.</li><li>undo-propose - Navigate the emacs undo history by staging undoâs in a temporary buffer.</li><li>vundo - Navigate the emacs undo buffer history as a tree-structure.</li></ul><h3 id="multiple-major-mode" tabindex="-1"><a class="header-anchor" href="#multiple-major-mode" aria-hidden="true">#</a> Multiple Major-Mode</h3><ul><li>mmm-mode - allows Multiple Major Modes to coexist in one buffer (ex: Embedded CSS &amp; JS in HTML file).</li><li>polymode - Framework for Multiple Major Modes in Emacs (ex: Embedded programming language code in Markdown, Org, RST fileâ¦etc)</li></ul><h3 id="snippet" tabindex="-1"><a class="header-anchor" href="#snippet" aria-hidden="true">#</a> Snippet</h3><ul><li>YASnippets - A template system that allows you to type an abbreviation and automatically expand it into function templates. <ul><li>auto-yasnippet - Advanced copy-paste using Yasnippet.</li><li>ivy-yasnippet - Preview yasnippet snippets with ivy.</li></ul></li><li>Tempel: Template package which uses the syntax of the Emacs Tempo library.</li></ul><h2 id="programming" tabindex="-1"><a class="header-anchor" href="#programming" aria-hidden="true">#</a> Programming</h2><ul><li>CEDET - [built-in] an advanced development environment in Emacs.</li><li>C-xrefactory - refactoring tool and code browser for C and Java.</li><li>evil-nerd-commenter - Comment/uncomment lines efficiently. Like Nerd Commenter in Vim. This program can be used independently without evil-mode.</li><li>Doxymacs - Doxymacs is Doxygen + {X}Emacs.</li><li>format-all - Auto-format source code in many languages using the same command.</li><li>apheleia - Run code formatter on buffer contents without moving point, using RCS patches and dynamic programming.</li></ul><h3 id="completion" tabindex="-1"><a class="header-anchor" href="#completion" aria-hidden="true">#</a> Completion</h3><ul><li>Auto-Complete - An intelligent auto-completion extension with great interface.</li><li>Company - A text completion framework.</li><li>company-quickhelp - Documentation popups for company.</li><li>flx - Fuzzy matching for Emacs like Sublime Text.</li><li>abbrev - [built-in] Abbreviation expander.</li><li>emacs-ycmd - Emacs client for YCM.</li><li>corfu - Corfu enhances the default completion in region function with a completion overlay.</li><li>recomplete - Immediate completion that doesnât block user input, but cycles through options on successive calls. It can also be used with ISpell as a fast way to correct typos.</li><li>mono-complete - Non-blocking completion with preview that doesnât block user input which supports multiple back-ends at once including back-ends for dabbrev, capf and statistical word prediction among others.</li></ul><h3 id="jump-to-definition-tagging" tabindex="-1"><a class="header-anchor" href="#jump-to-definition-tagging" aria-hidden="true">#</a> Jump to Definition / Tagging</h3><ul><li>GNU Global - advanced source code tagging system with jump to definition functionality.</li><li>Dumb Jump - easy jump to definition package for multiple languages using ag or grep.</li><li>ggtags - Emacs frontend to GNU Global source code tagging system.</li><li>Citre - Advanced Ctags frontend, comes with powerful code-reading tool.</li></ul><h3 id="lsp-client" tabindex="-1"><a class="header-anchor" href="#lsp-client" aria-hidden="true">#</a> LSP Client</h3><ul><li>lsp-mode - Emacs client for the Language Server Protocol. <ul><li>lsp-ui - An extension which adds code lenses and documentation pop-up for lsp-mode.</li></ul></li><li>eglot - [built-in] A client for Language Server Protocol servers.</li><li>lsp-bridge - Fastest LSP client for Emacs.</li></ul><h3 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h3><ul><li>realgud - A modular front-end for interacting with external debuggers.</li><li>dap-mode - An implementation of the debug adapter protocol used in VSCode and other editors.</li></ul><h3 id="error-checking" tabindex="-1"><a class="header-anchor" href="#error-checking" aria-hidden="true">#</a> Error Checking</h3><ul><li>FlyMake - [built-in] on-the-fly syntax checks on files using external tools.</li><li>Flycheck - Modern on-the-fly syntax checking meant to be a replacement to FlyMake.</li></ul><h3 id="document" tabindex="-1"><a class="header-anchor" href="#document" aria-hidden="true">#</a> Document</h3><ul><li>eldoc - [built-in] shows function arguments / variable doc in minibuffer when coding.</li><li>tldr.el - Emacs client of tldr-pages.</li></ul><h3 id="code-folding" tabindex="-1"><a class="header-anchor" href="#code-folding" aria-hidden="true">#</a> Code Folding</h3><ul><li>vimish-fold - Vim-like text folding.</li><li>hideshow - [built-in] Folding regions by balanced-expression code. <ul><li>hideshowvis - Based on hideshow, just display its nodes on fringe.</li></ul></li><li>Origami.el - Feature rich text folding minor mode.</li></ul><h3 id="compiling" tabindex="-1"><a class="header-anchor" href="#compiling" aria-hidden="true">#</a> Compiling</h3><ul><li>multi-compile - Multi target interface to compile.</li><li>fancy-compilation - Output enhancements to compilation-mode (including color support).</li></ul><h2 id="project-management" tabindex="-1"><a class="header-anchor" href="#project-management" aria-hidden="true">#</a> Project management</h2><ul><li>Projectile - Project Interaction Library for Emacs.</li><li>Prodigy - Manage external services from within Emacs.</li><li>Project-Explorer - a tree project explorer (integrates with projectile).</li><li>Find-file-in-project - Quick access to project files in Emacs.</li></ul><h2 id="file-manager" tabindex="-1"><a class="header-anchor" href="#file-manager" aria-hidden="true">#</a> File Manager</h2><ul><li>Dired - [built-in] Dir ectory Ed itor. A customizable great file manager. <ul><li>Dirvish - A polished Dired bundled with useful extensions.</li><li>Dired+ - Functional &amp; interface extensions for Dired.</li><li>dired-hacks - Collection of useful Dired additions.</li><li>dired-k - Highlight Dired buffer by file size, modified time, git status.</li></ul></li><li>NeoTree - A emacs tree plugin like NERD tree for Vim.</li><li>Sr Speedbar - Same frame speedbar. <ul><li>projectile-speedbar - Speedbar and Projectile integration.</li></ul></li><li>Direx - directory tree explorer.</li><li>ztree - Directory tree comparison mode.</li><li>Ranger - ranger like file manager based on Dired.</li><li>Treemacs - a tree layout file explorer for Emacs.</li><li>Sidebar.el - A customizable file explorer with git integration for emacs.</li></ul><h2 id="programming-language" tabindex="-1"><a class="header-anchor" href="#programming-language" aria-hidden="true">#</a> Programming Language</h2><h3 id="c-c" tabindex="-1"><a class="header-anchor" href="#c-c" aria-hidden="true">#</a> C/C++</h3><ul><li>CC Mode - [built-in] An Emacs and XEmacs mode for editing C and other languages with similar syntax.</li><li>rtags - A C/C++ client/server indexer with for integration with emacs based on clang.</li><li>emacs-ccls - Emacs client of ccls, a C/C++/Objective-C language server powered by clang.</li><li>emacs-cquery - Emacs client of cquery, a C/C++/Objective-C language server powered by clang.</li><li>irony-mode - A C/C++ minor mode for Emacs powered by libclang.</li><li>cmake-font-lock - Enhanced font-lock rules for CMake.</li><li>Ebrowse - [built-in] A C++ class browser.</li><li>cmake-ide - Configures other packages to consider compile options like include paths from cmake projects to improve e.g. autocompletion.</li><li>clang-format - An interface to clang-format for Emacs, provides C/C++ code formatting functionality.</li></ul><h3 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> Python</h3><ul><li>Elpy - An Emacs Python development environment.</li><li>anaconda-mode - Code navigation, documentation lookup and completion for Python.</li><li>virtualenvwrapper.el - Manage virtualenv from inside Emacs.</li><li>pipenv.el - Integrates pipenv to emacs providing useful commands.</li></ul><h3 id="lisp-family" tabindex="-1"><a class="header-anchor" href="#lisp-family" aria-hidden="true">#</a> Lisp Family</h3><ul><li>Paredit - Minor mode for editing parentheses. Strict parenthesis auto-pairing and easy depth adjustment. Compatible with Lisp/Scheme/Clojure.</li><li>lispy - Minor mode for editing parenthesis, evaluating and refactoring LISP code with extremely short key bindings. Compatible with Lisp/Scheme/Clojure.</li><li>Parinfer - Parinfer for Emacs, simpler Lisp editing.</li></ul><h4 id="common-lisp" tabindex="-1"><a class="header-anchor" href="#common-lisp" aria-hidden="true">#</a> Common Lisp</h4><ul><li>SLIME - A fully-functional IDE for Common Lisp development, with debugger, REPL. <ul><li>SLY - A fork of SLIME.</li></ul></li><li>common-lisp-snippets - Yasnippets for Common Lisp.</li></ul><h4 id="clojure" tabindex="-1"><a class="header-anchor" href="#clojure" aria-hidden="true">#</a> Clojure</h4><ul><li>Clojure mode - A major mode for clojure.</li><li>Cider - Clojure IDE and REPL.</li><li>Clojure snippets - Clojure snippets with yasnippet.</li><li>clj-refactor.el - A collection of Clojure refactoring functions for Emacs.</li></ul><h4 id="emacs-lisp" tabindex="-1"><a class="header-anchor" href="#emacs-lisp" aria-hidden="true">#</a> Emacs Lisp</h4><ul><li>highlight-defined - Highlight defined functionsâ / variablesâ name.</li><li>ielm - [built-in] A simple Emacs Lisp REPL.</li><li>elmacro - Display keyboard macros or latest interactive commands as Emacs Lisp.</li><li>suggest.el - Discover elisp functions that do what you want.</li><li>easy-escape - Improve readability of escape characters in ELisp regular expressions.</li><li>eros - Evaluation Result OverlayS for Emacs Lisp.</li><li>elisp-autofmt - Auto-format ELisp (with support for formatting the buffer on save).</li></ul><h3 id="web-development" tabindex="-1"><a class="header-anchor" href="#web-development" aria-hidden="true">#</a> Web Development</h3><ul><li>web-mode - major mode for editing various html templates (PHP, JSP, ASP, ERBâ¦etc).</li><li>emmet - Emmet support for Emacs.</li><li>web-beautify - Format HTML, CSS and JavaScript/JSON by js-beautify.</li><li>skewer-mode - live interact with JavaScript, CSS, and HTML in a web-browser.</li></ul><h4 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h4><ul><li>js2-mode - Improved JavaScript editing mode.</li><li>js-comint.el - Run an inferior javascript REPL process in Emacs.</li><li>tern - Emacs flavor of the popular JavaScript analysis engine.</li><li>json-mode - Major mode for editing JSON files.</li><li>indium - A JavaScript development environment for Emacs.</li><li>js2-refactor - A JavaScript refactoring library for emacs.</li><li>rjsx-mode - A JSX major mode for Emacs.</li><li>npm.el - Run your npm workflows in emacs.</li></ul><h4 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h4><ul><li>Tide - TypeScript Interactive Development Environment for Emacs.</li></ul><h3 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h3><ul><li>emacs-eclim - An Eclipse plugin which exposes Eclipse features through a server interface.</li><li>meghanada-emacs - A Better Java Development Environment for Emacs.</li><li>lsp-java - Eclipse JDT Language Server integration for Emacs.</li></ul><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C#</h3><ul><li>csharp-mode - Major mode for C#.</li><li>omnisharp-emacs - IDE-like features for editing C# code.</li></ul><h3 id="rust" tabindex="-1"><a class="header-anchor" href="#rust" aria-hidden="true">#</a> Rust</h3><ul><li>rust-mode - An Emacs major mode for editing Rust code.</li><li>flycheck-rust - Better Rust/Cargo support for Flycheck.</li><li>emacs-racer - Racer support for Emacs.</li><li>cargo.el - Cargo support for Emacs.</li><li>rustic - A fork of rust mode with improvements and configurations for things such as flycheck and lsp-mode.</li></ul><h3 id="haskell" tabindex="-1"><a class="header-anchor" href="#haskell" aria-hidden="true">#</a> Haskell</h3><ul><li>haskell-mode - Major mode for Haskell.</li><li>dante - Dante provides a frontend to GHCi features: type-checking, execution, completion and cross referencing. It integrates with standard Emacs tooling as much as possible.</li><li>structured-haskell-mode - Minor mode for structured editing of Haskell.</li><li>HaRe - Haskell refactoring tool with Emacs integration.</li><li>https://github.com/matthewbauer/nix-haskell-mode - Nix integration for Haskell development.</li><li>lsp-haskell and haskell-language-server - A successor to Intero under active development.</li></ul><h3 id="lua" tabindex="-1"><a class="header-anchor" href="#lua" aria-hidden="true">#</a> Lua</h3><ul><li>lua-mode - A major mode for editing Lua sources in Emacs.</li></ul><h3 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile" aria-hidden="true">#</a> Makefile</h3><ul><li>Makefile Mode - [built-in] A major mode for editing Makefiles.</li><li>helm-make - Select a Makefile target with helm.</li><li>basic-c-compile - Emacs package to create a Makefile, compile and run a C file.</li><li>makefile-executor - Emacs helpers to run things from Makefiles.</li><li>emacs-makefile-runner - Searches for Makefile and fetches targets.</li></ul><h3 id="gdscript" tabindex="-1"><a class="header-anchor" href="#gdscript" aria-hidden="true">#</a> Gdscript</h3><ul><li>gdscript-mode - An Emacs package to get GDScript support and syntax highlighting.</li></ul><h3 id="groovy" tabindex="-1"><a class="header-anchor" href="#groovy" aria-hidden="true">#</a> Groovy</h3><ul><li>groovy-emacs-modes - A collection of modes for use with Groovy-related technology â Groovy, Grails, etc.</li><li>grails.el - A minor mode for Grails projects.</li></ul><h3 id="julia" tabindex="-1"><a class="header-anchor" href="#julia" aria-hidden="true">#</a> Julia</h3><ul><li>julia-mode - Major mode for editing Julia source code.</li><li>julia-repl - A minor emacs mode for Julia REPL.</li></ul><h2 id="ai" tabindex="-1"><a class="header-anchor" href="#ai" aria-hidden="true">#</a> AI</h2><h3 id="code-completion" tabindex="-1"><a class="header-anchor" href="#code-completion" aria-hidden="true">#</a> Code Completion</h3><ul><li>Copilot.el - an Emacs plugin for GitHub Copilot.</li></ul><h3 id="chatgpt" tabindex="-1"><a class="header-anchor" href="#chatgpt" aria-hidden="true">#</a> ChatGPT</h3><ul><li>chatgpt-shell - ChatGPT and DALL-E Emacs shells + Org Babel.</li><li>GPTel - A simple ChatGPT client for Emacs.</li><li>org-ai - Minor mode for Emacs org-mode that provides access to generative AI models.</li></ul><h2 id="keys-cheat-sheet" tabindex="-1"><a class="header-anchor" href="#keys-cheat-sheet" aria-hidden="true">#</a> Keys Cheat Sheet</h2><ul><li>which-key - Display available key bindings in popup. Rewrite of guide-key with added features to improve display.</li><li>helm-descbinds - Helm interface for Emacsâ describe-bindings.</li><li>guide-key - Displays the available key bindings automatically and dynamically.</li><li>guide-key-tip - Tooltip version of guide-key.</li><li>discover-my-major - Discover key bindings and their meaning for the current Emacs major mode.</li><li>discover.el - Discover more of emacs with well-categorized context menus.</li></ul><h2 id="note" tabindex="-1"><a class="header-anchor" href="#note" aria-hidden="true">#</a> Note</h2><h3 id="org-mode" tabindex="-1"><a class="header-anchor" href="#org-mode" aria-hidden="true">#</a> Org-mode</h3><ul><li>Org - [built-in] Write notes, GTD, authoring, publish and wash dishes. <ul><li>org-page - A static site generator based on org-mode files.</li><li>org-ioslide - Export Org document into Google I/O HTML5 slide.</li><li>org-bullets - Shows org-mode bullets as pretty UTF-8 characters.</li><li>org-trello - Minor mode to synchronize org-mode buffer and trello board.</li><li>org-protocol-capture-html - Capture HTML from the browser selection into Emacs as org-mode content.</li><li>org-brain - Org-mode wiki + concept-mapping.</li><li>org-cliplink - Insert org-mode links from clipboard.</li><li>helm-org-rifle - Rifle through your Org buffers and acquire your target.</li><li>org-download - Drag and drop images to Emacs org-mode.</li><li>org-html-themes - Export Org mode files into awesome HTML in 2 minutes.</li><li>org-super-agenda - Help organize your agenda items into tidy groups.</li><li>org-noter - Annotate documents with a synchronized org-mode buffer alongside them.</li><li>org-sort-tasks - Functions to keep TODO tasks in orgmode sorted and organized.</li><li>org-web - Web app for viewing and editing org files online, optimized for mobile use.</li><li>org-roam - a Roam replica built on top of the all-powerful Org-mode.</li><li>org-ql - An Org-mode query language, including search commands and saved views.</li><li>org-transclusion - Link content between buffers to make multiple changes with one edit.</li><li>toc-org - Generate TOC for Org files.</li></ul></li></ul><h2 id="integration" tabindex="-1"><a class="header-anchor" href="#integration" aria-hidden="true">#</a> Integration</h2><h3 id="console" tabindex="-1"><a class="header-anchor" href="#console" aria-hidden="true">#</a> Console</h3><ul><li>EShell - [built-in] A shell-like command interpreter implemented in Emacs Lisp.</li><li>Term - [built-in] A terminal emulator in Emacs.</li><li>multi-term - Managing multiple terminal buffers in Emacs.</li><li>vterm - A fully-fledged terminal emulator inside Emacs based on libvterm.</li><li>Eat - Emulate A Terminal, in a region, in a buffer and in Eshell.</li><li>exec-path-from-shell - Get environment variables such as $PATH from the shell for Mac user.</li><li>eshell-prompt-extras - Display extra information and color for your eshell prompt.</li><li>shell-pop - Quickly toggle a shell with one key action.</li><li>eshell-up - Quickly navigate to a specific parent directory in eshell without having to repeatedly typing cd ...</li><li>fasd - Emacs integration for the command-line productivity booster fasd.</li><li>aweshell - Awesome shell extension based on eshell with wonderful features!</li></ul><h3 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> Search</h3><ul><li>wgrep - Writable grep/ack/ag/pt buffer and apply the changes to files.</li></ul><h4 id="ripgrep" tabindex="-1"><a class="header-anchor" href="#ripgrep" aria-hidden="true">#</a> Ripgrep</h4><ul><li>deadgrep - Deadgrep is the fast, beautiful text search that your Emacs deserves.</li><li>rg.el - Emacs search tool based on ripgrep.</li><li>ripgrep.el - Emacs front-end for ripgrep, a command line search tool.</li><li>color-rg.el â Search and refactoring tool base on ripgrep, integrate edit feature like wgrep, donât need install wgrep added.</li></ul><h2 id="markdown" tabindex="-1"><a class="header-anchor" href="#markdown" aria-hidden="true">#</a> Markdown</h2><ul><li>Markdown-mode - markdown-mode is a major mode for editing Markdown-formatted text files in GNU Emacs.</li><li>markdown-mode+ - Additional functions for Emacs [markdown-mode].</li><li>markdown-toc - Generate TOC for markdown files.</li><li>markdownfmt - Format markdown using markdownfmt.</li><li>grip-mode - Instant Github-flavored Markdown/Org preview using Grip.</li></ul><h2 id="latex" tabindex="-1"><a class="header-anchor" href="#latex" aria-hidden="true">#</a> LaTeX</h2><ul><li>AUCTeX - an extensible package for writing and formatting TeX files.</li><li>latex-preview-pane is a minor mode for Emacs that enables you to preview your LaTeX files directly in Emacs.</li><li>RefTeX - [built-in] Adds support for labels, references, citations, and index entries.</li><li>math-preview - Preview TeX and MathML equations inline.</li></ul><h2 id="pdf" tabindex="-1"><a class="header-anchor" href="#pdf" aria-hidden="true">#</a> PDF</h2><ul><li>PDF Tools - major mode for rendering PDF files, much better than DocView, and has a much richer set of features.</li><li>pdf-view-restore - addition to PDF Tools which saves the current position in a PDF to resume reading at that place even after the buffer has been closed or emacs restarted.</li></ul><h2 id="internet" tabindex="-1"><a class="header-anchor" href="#internet" aria-hidden="true">#</a> Internet</h2><h3 id="browser" tabindex="-1"><a class="header-anchor" href="#browser" aria-hidden="true">#</a> Browser</h3><ul><li>EWW - [built-in] EWW, the Emacs Web Wowser, is a web browser for Emacs.</li></ul><h2 id="theme" tabindex="-1"><a class="header-anchor" href="#theme" aria-hidden="true">#</a> Theme</h2><ul><li>Zenburn - (dark) Vimâs âZenburn themeâ ported to Emacs.</li><li>Solarized - (light/dark) Solarized color theme.</li><li>Doom-themes - (theme pack) UI plugin and pack of themes extracted from Doom Emacs.</li><li>Sanityinc-tomorrow - (light/dark) An Emacs version of âTomorrow-themesâ.</li><li>Monokai - (dark) A port of the popular TextMate theme Monokai.</li><li>Cyberpunk-theme - (dark) [256color] Mostly a direct port of the âCyberpunk Overtone themeâ.</li><li>Ample-theme - (light/dark) [256color] A low-contrast theme for Emacs.</li><li>Moe-theme- (light/dark) [256color] A customizable colorful eye-candy theme. Moe, moe, kyun!</li><li>Leuven-theme - [built-in] (light) Awesome Emacs color theme for white backgrounds.</li><li>Grandshell-theme - (dark) [256color] Theme with intensive colors.</li><li>Poet - (light/dark) A lightweight theme that plays well with prose and org-mode.</li><li>Kaolin-themes - (theme package) Set of eye-pleasing themes for GNU Emacs. Supports both GUI and terminal.</li><li>Wilmersdorf-theme - (dark) Emacs theme with dark subtle syntax highlighting.</li><li>Tron-Legacy-Theme - (dark) Custom theme inspired by Tron: Legacy.</li><li>Modus Themes - (light/dark) Accessible themes for GNU Emacs, conforming with the highest accessibility standard for colour contrast between background and foreground values (WCAG AAA standard).</li><li>N Î N O (Nano) Themes - (light/dark) A light theme based on Material colors and a dark theme based on Nord colors.</li><li>Ef themes - (light/dark) - Colourful and legible themes for GNU Emacs.</li><li></li></ul>',132),o=[n];function t(s,d){return i(),a("div",null,o)}const h=e(r,[["render",t],["__file","packages.html.vue"]]);export{h as default};
